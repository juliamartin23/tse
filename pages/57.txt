<<<<<<< HEAD
https://thayer.github.io/engs50/Resources/Homebrew.html
2
4917
=======
https://thayer.github.io/engs50/Notes/c2/activity.html
3
7378
>>>>>>> 384f1e5bd435ca42f571d4856ac38fdd79014ca8
<!DOCTYPE html>
<html>

  <head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

<<<<<<< HEAD
  <title>Homebrew installation</title>
=======
  <title>Activity - strings are arrays</title>
>>>>>>> 384f1e5bd435ca42f571d4856ac38fdd79014ca8
  <meta name="description" content="In Engs 50 you will learn how to design & build large, reliable, maintainable, and understandable software systems.  In the process you will learn to program in C with Unix development tools.
">

  <link rel="shortcut icon" href="/engs50/50.png" />
  <link rel="stylesheet" href="/engs50/css/main.css">
<<<<<<< HEAD
  <link rel="canonical" href="/engs50/Resources/Homebrew.html">
=======
  <link rel="canonical" href="/engs50/Notes/c2/activity.html">
>>>>>>> 384f1e5bd435ca42f571d4856ac38fdd79014ca8
</head>


  <body>

    <header class="site-header">

    <a class="site-title" href="/engs50/">
      <img width=48 align=center src="/engs50/50.png" alt="icon">
      Engs50 (CS50)
    </a>

    <nav class="site-nav">
      [<a href="/engs50/Labs/">Labs</a>]
      [<a href="/engs50/Notes/">Notes</a>]
      [<a href="/engs50/Reading/">Reading</a>]
      [<a href="/engs50/Resources/">Resources</a>]
			[<a href="/engs50/Examples/">Examples</a>]
   </nav>

</header>


    <div class="page-content">
      <div class="wrapper">
        <article class="post">

  <header class="post-header">
<<<<<<< HEAD
    <h1 class="post-title">Homebrew installation</h1>
  </header>

  <div class="post-content">
    <p>MacOS users are lucky because they get all the grace of a graphical interface with a large ecosystem of applications to make their computer productive, <em>plus they have access to the full power of Unix under the hood.</em>
Apple includes a lot of the core Unix commands and utilities, by default, but some of the commands you’ll need (or want) in this course need to be added.
Some of these can be installed through the Apple developer’s tool (<code class="highlighter-rouge">Xcode</code>), but lots of great open-source software needs to be installed separately.</p>

<p>The easiest way to install open-source software is through a ‘package manager’ (Linux users are likely already familiar with this concept!).
There are several package managers for MacOS, but I like the one called <em><a href="http://brew.sh">Homebrew</a></em>.
It’s easy to install and easy to use for installing other tools.</p>

<p>To get started, open a <code class="highlighter-rouge">Terminal</code> window and a browser window.
In your browser, visit the <em><a href="http://brew.sh">Homebrew</a></em> site; copy the one-line command near the top of the page.</p>

<p><img src="/engs50/Resources/Homebrew0.png" alt="homepage" /></p>

<blockquote>
  <p>Notice that it simply asks you to copy and paste a complex command into the <code class="highlighter-rouge">Terminal</code>.
You should never blindly copy-paste shell commands without understanding what the command will do to your computer!
In this case, the Homebrew page explains what it will do, and you’re hearing it from me - this is a safe tool to install.
As far as I know. ;-)</p>
</blockquote>

<p>Switch to <code class="highlighter-rouge">Terminal</code> and paste in that command.
The installation will download some files and start running.</p>

<p>If you’ve never run any of the ‘developer’-oriented commands (like <code class="highlighter-rouge">gcc</code> or <code class="highlighter-rouge">make</code>) on your Mac before, you may see a popup like the following:</p>

<p><img src="/engs50/Resources/Homebrew1.png" alt="Xcode popup" /></p>

<p>Click ‘Install’ to let Xcode do its thing.
It may be a large download.
This installer downloads all the command-line tools from Apple and installs them on your Mac.
You’ll need these tools, and so does Homebrew.</p>

<p>When that completes, press Return in the Terminal window to allow the Homebrew installation to complete.
Then you can install new packages with a command line <code class="highlighter-rouge">brew install</code> followed by the package name (Homebrew actually calls them “formulas”).
You can search for package names with <code class="highlighter-rouge">brew search</code>.</p>

<p>Later, periodically, you should <code class="highlighter-rouge">brew update</code> and then <code class="highlighter-rouge">brew upgrade</code> to keep all your software up to date.
I do this about once a month.</p>

=======
    <h1 class="post-title">Activity - strings are arrays</h1>
  </header>

  <div class="post-content">
    <p>In C, a string is actually an array of characters, which (by convention) is terminated by a null (<code class="highlighter-rouge">\0</code>) character.</p>

<p>Examine this program, in <code class="highlighter-rouge">overflow.c</code>:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">buflen</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">buf1</span><span class="p">[</span><span class="n">buflen</span><span class="p">];</span>
  <span class="kt">char</span> <span class="n">buf2</span><span class="p">[</span><span class="n">buflen</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">example</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"%d: buf1='%s', buf2='%s'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">example</span><span class="o">++</span><span class="p">,</span> <span class="n">buf1</span><span class="p">,</span> <span class="n">buf2</span><span class="p">);</span>

  <span class="c1">// assign a constant to each buffer
</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">buf1</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">);</span>  <span class="c1">// like buf1 = "hello"
</span>  <span class="n">printf</span><span class="p">(</span><span class="s">"%d: buf1='%s', buf2='%s'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">example</span><span class="o">++</span><span class="p">,</span> <span class="n">buf1</span><span class="p">,</span> <span class="n">buf2</span><span class="p">);</span>

  <span class="n">strcpy</span><span class="p">(</span><span class="n">buf2</span><span class="p">,</span> <span class="s">"class!"</span><span class="p">);</span>  <span class="c1">// like buf2 = "class!"
</span>  <span class="n">printf</span><span class="p">(</span><span class="s">"%d: buf1='%s', buf2='%s'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">example</span><span class="o">++</span><span class="p">,</span> <span class="n">buf1</span><span class="p">,</span> <span class="n">buf2</span><span class="p">);</span>

  <span class="c1">// assign a longer constant to each buffer
</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">buf1</span><span class="p">,</span> <span class="s">"hellohellohello"</span><span class="p">);</span> <span class="c1">// 15 characters
</span>  <span class="n">printf</span><span class="p">(</span><span class="s">"%d: buf1='%s', buf2='%s'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">example</span><span class="o">++</span><span class="p">,</span> <span class="n">buf1</span><span class="p">,</span> <span class="n">buf2</span><span class="p">);</span>

  <span class="n">strcpy</span><span class="p">(</span><span class="n">buf2</span><span class="p">,</span> <span class="s">"class!class!class!"</span><span class="p">);</span>  <span class="c1">// 18 characters
</span>  <span class="n">printf</span><span class="p">(</span><span class="s">"%d: buf1='%s', buf2='%s'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">example</span><span class="o">++</span><span class="p">,</span> <span class="n">buf1</span><span class="p">,</span> <span class="n">buf2</span><span class="p">);</span>

  <span class="n">putchar</span> <span class="p">(</span><span class="sc">'\n'</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">buflen</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"buf1[%d] = '%c'</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">buf1</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Explain its output, below, which may not be what you expected!</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0: buf1=W?P?', buf2='?V?P?'
1: buf1='hello', buf2='?V?P?'
2: buf1='hello', buf2='class!'
3: buf1='hellohellohello', buf2='class!'
4: buf1='s!', buf2='class!class!class!'

buf1[0] = 's'
buf1[1] = '!'
buf1[2] = ''
buf1[3] = 'l'
buf1[4] = 'o'
buf1[5] = 'h'
buf1[6] = 'e'
buf1[7] = 'l'
buf1[8] = 'l'
buf1[9] = 'o'
buf1[10] = 'h'
buf1[11] = 'e'
buf1[12] = 'l'
buf1[13] = 'l'
buf1[14] = 'o'
buf1[15] = ''
</code></pre></div></div>
>>>>>>> 384f1e5bd435ca42f571d4856ac38fdd79014ca8

  </div>

</article>

      </div>
    </div>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">Engs50 (CS50) -- Dartmouth College</h2>

    <p> <font size=-1>
    	This version of the course is based upon those designed by
    	Professors Palmer, Kotz, Zhou, Campbell, and Balkcom.
	I am deeply indebted to these outstanding educators.
    -- <a href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen Taylor</a>
       </font>
    </p>
    <p><small>This page was last updated on <strong>2018-10-10</strong> at <strong>18:07</strong>.</small></p>
  </div>

</footer>


  </body>

</html>
